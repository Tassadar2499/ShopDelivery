@page "/courierinfo"

@using Microsoft.AspNetCore.SignalR.Client
@using CouriersWebService.Data
@using CouriersWebService.Services
@using Microsoft.Extensions.Logging
@using Blazored.LocalStorage

@inject NavigationManager navigationManager
@inject CouriersAuthLogic authLogic
@inject ILogger<CourierInfo> logger
@inject ILocalStorageService localStorage

@implements IAsyncDisposable

<h3>CourierInfo</h3>

<ul id="messagesList">
	@foreach (var message in Messages)
	{
		<li>@message</li>
	}
</ul>

@code {
	private HubConnection HubConnection { get; set; }
	private List<string> Messages { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Messages = new List<string>();

		HubConnection = new HubConnectionBuilder()
			.WithUrl(navigationManager.ToAbsoluteUri("/couriershub"))
			.Build();

		HubConnection.On<string>("RecieveOrderInfo", OnStartConnection);
		HubConnection.Closed += OnCloseConnectionAsync;

		await HubConnection.StartAsync();

		var updateCourierData = await GetUpdateCourierDataAsync();
		await authLogic.UpdateAsync(updateCourierData);
	}

	private void OnStartConnection(string message)
	{
		Messages.Add(message);
		StateHasChanged();
	}

	private async Task OnCloseConnectionAsync(Exception ex)
	{
		logger.LogInformation("Connection closed");
		if (ex != null)
			logger.LogError($"Error - {ex}");

		Messages.Clear();
		var login = await GetLoginAsync();
		await authLogic.RemoveAsync(login);
	}

	private async Task<UpdateCourierData> GetUpdateCourierDataAsync()
	{
		var random = new Random();
		var login = await GetLoginAsync();
		return new UpdateCourierData()
		{
			Login = login,
			SignalRConnectionId = HubConnection.ConnectionId,
			Longitude = random.Next(1000) + random.NextDouble(),
			Latitude = random.Next(1000) + random.NextDouble()
		};
	}

	private async Task<string> GetLoginAsync()
		=> await localStorage.GetItemAsStringAsync("login");

	public bool IsConnected =>
		HubConnection.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		await HubConnection.DisposeAsync();
	}
}