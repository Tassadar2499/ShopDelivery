@page "/courierinfo"

@using Microsoft.AspNetCore.SignalR.Client
@using CouriersWebService.Data
@using System.Net.Http.Json;
@using CouriersWebService.Services;
@using System.Web;

@inject NavigationManager navigationManager
@inject HttpClient HttpClient
@inject CouriersAuthLogic authLogic

@implements IAsyncDisposable

<h3>CourierInfo</h3>

<ul id="messagesList">
	@foreach (var message in Messages)
	{
		<li>@message</li>
	}
</ul>

@code {
	private HubConnection HubConnection { get; set; }
	private List<string> Messages { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Messages = new List<string>();

		HubConnection = new HubConnectionBuilder()
			.WithUrl(navigationManager.ToAbsoluteUri("/couriershub"))
			.Build();

		HubConnection.On<string>("RecieveOrderInfo", message =>
		{
			Messages.Add(message);
			StateHasChanged();
		});

		await HubConnection.StartAsync();

		var random = new Random();
		var updateCourierData = new UpdateCourierData()
		{
			Login = GetLogin(),
			SignalRConnectionId = HubConnection.ConnectionId,
			Longitude = random.Next(1000) + random.NextDouble(),
			Latitude = random.Next(1000) + random.NextDouble()
		};

		await authLogic.UpdateAsync(updateCourierData);
	}

	private string GetLogin()
	{
		var uriBuilder = new UriBuilder(navigationManager.Uri);
		var queryParams = HttpUtility.ParseQueryString(uriBuilder.Query);

		return queryParams["login"];
	}

	public bool IsConnected =>
		HubConnection.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		await HubConnection.DisposeAsync();
	}
}